From b5fb09a51ee1e41a5978bd68b0ec71ebd82f77b8 Mon Sep 17 00:00:00 2001
From: Steve Lhomme <robux4@ycbcr.xyz>
Date: Wed, 14 Jun 2023 09:35:41 +0200
Subject: [PATCH] Replace GlobalAllocPtr calls with calloc

The allocations are just meant to allocate buffers and zero them in one call.
It can be done with calloc in a portable way.
---
 src/mmcmp.cpp   | 6 +++---
 src/sndfile.cpp | 6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/mmcmp.cpp b/src/mmcmp.cpp
index f0b0357..1500320 100644
--- a/src/mmcmp.cpp
+++ b/src/mmcmp.cpp
@@ -175,7 +175,7 @@ BOOL MMCMP_Unpack(LPCBYTE *ppMemFile, LPDWORD pdwMemLength)
 	 || (!pmmh->nblocks) || (pmmh->filesize < 16) || (pmmh->filesize > 0x8000000)
 	 || (pmmh->blktable >= dwMemLength) || (pmmh->blktable + 4*pmmh->nblocks > dwMemLength)) return FALSE;
 	dwFileSize = pmmh->filesize;
-	if ((pBuffer = (LPBYTE)GlobalAllocPtr(GHND, (dwFileSize + 31) & ~15)) == NULL) return FALSE;
+	if ((pBuffer = (LPBYTE)calloc(1, (dwFileSize + 31) & ~15)) == NULL) return FALSE;
 	pblk_table = (const DWORD *)(lpMemFile+pmmh->blktable);
 	for (UINT nBlock=0; nBlock<pmmh->nblocks; nBlock++)
 	{
@@ -377,7 +377,7 @@ BOOL MMCMP_Unpack(LPCBYTE *ppMemFile, LPDWORD pdwMemLength)
 			}
 		} else
 		{
-			GlobalFreePtr(pBuffer);
+			free(pBuffer);
 			return FALSE;
 		}
 	}
@@ -490,7 +490,7 @@ BOOL PP20_Unpack(LPCBYTE *ppMemFile, LPDWORD pdwMemLength)
 	dwDstLen = (lpMemFile[dwMemLength-4]<<16) | (lpMemFile[dwMemLength-3]<<8) | (lpMemFile[dwMemLength-2]);
 	//Log("PP20 detected: Packed length=%d, Unpacked length=%d\n", dwMemLength, dwDstLen);
 	if ((dwDstLen < 512) || (dwDstLen > 0x400000) || (dwDstLen > 16*dwMemLength)) return FALSE;
-	if ((pBuffer = (LPBYTE)GlobalAllocPtr(GHND, (dwDstLen + 31) & ~15)) == NULL) return FALSE;
+	if ((pBuffer = (LPBYTE)calloc(1, (dwDstLen + 31) & ~15)) == NULL) return FALSE;
 	PP20_DoUnpack(lpMemFile+4, dwMemLength-4, pBuffer, dwDstLen);
 	*ppMemFile = pBuffer;
 	*pdwMemLength = dwDstLen;
diff --git a/src/sndfile.cpp b/src/sndfile.cpp
index 2374167..5dba706 100644
--- a/src/sndfile.cpp
+++ b/src/sndfile.cpp
@@ -167,7 +167,7 @@ BOOL CSoundFile::Create(LPCBYTE lpStream, DWORD dwMemLength)
 #ifdef MMCMP_SUPPORT
 		if (bMMCmp)
 		{
-			GlobalFreePtr(lpStream);
+			free(const_cast<LPBYTE>(lpStream));
 			lpStream = NULL;
 		}
 #endif
@@ -354,7 +354,7 @@ void CSoundFile::FreePattern(LPVOID pat)
 signed char* CSoundFile::AllocateSample(UINT nbytes)
 //-------------------------------------------
 {
-	signed char * p = (signed char *)GlobalAllocPtr(GHND, (nbytes+39) & ~7);
+	signed char * p = (signed char *)calloc(1, (nbytes+39) & ~7);
 	if (p) p += 16;
 	return p;
 }
@@ -365,7 +365,7 @@ void CSoundFile::FreeSample(LPVOID p)
 {
 	if (p)
 	{
-		GlobalFreePtr(((LPSTR)p)-16);
+		free(((LPSTR)p)-16);
 	}
 }
 
-- 
2.37.3.windows.1

