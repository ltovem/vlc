From c596f3a817a22856e36db9df10615a8e722a33f7 Mon Sep 17 00:00:00 2001
From: Fatih Uzunoglu <fuzun54@outlook.com>
Date: Wed, 21 Feb 2024 20:27:36 +0200
Subject: [PATCH] Use fxc2 through wine instead of fxc

---
 tools/qsb/qsb.cpp | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/tools/qsb/qsb.cpp b/tools/qsb/qsb.cpp
index bc38e14..d1a96fe 100644
--- a/tools/qsb/qsb.cpp
+++ b/tools/qsb/qsb.cpp
@@ -81,6 +81,7 @@ static bool runProcess(const QString &binary, const QStringList &arguments,
 {
 #if QT_CONFIG(process)
     QProcess p;
+    p.setWorkingDirectory(QCoreApplication::applicationDirPath());
     p.start(binary, arguments);
     const QString cmd = binary + QLatin1Char(' ') + arguments.join(QLatin1Char(' '));
     if (!silent)
@@ -820,14 +821,15 @@ int main(int argc, char **argv)
                                               QLatin1String("/nologo"),
                                               QLatin1String("/E"), QString::fromLocal8Bit(s.entryPoint()),
                                               QLatin1String("/T"), QString::fromLocal8Bit(typeArg),
-                                              QLatin1String("/Fo"), QDir::toNativeSeparators(tmpOut)
+                                              QLatin1String("/Fo"), "Z:" + QDir::toNativeSeparators(tmpOut)
                                           });
                     if (cmdLineParser.isSet(debugInfoOption))
                         arguments << QLatin1String("/Od") << QLatin1String("/Zi");
-                    arguments.append(QDir::toNativeSeparators(tmpIn));
+                    arguments.append("Z:" + QDir::toNativeSeparators(tmpIn));
                     QByteArray output;
                     QByteArray errorOutput;
-                    bool success = runProcess(QLatin1String("fxc"), arguments, &output, &errorOutput);
+                    arguments.prepend(QStringLiteral("fxc2"));
+                    bool success = runProcess(QLatin1String("wine"), arguments, &output, &errorOutput);
                     if (success) {
                         const QByteArray bytecode = readFile(tmpOut, FileType::Binary);
                         if (!bytecode.isEmpty())
-- 
2.43.1

