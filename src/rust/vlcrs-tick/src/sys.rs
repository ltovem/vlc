/* automatically generated by rust-bindgen 0.66.1 */

#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[doc = " High precision date or time interval\n\n Store a high precision date or time interval. The maximum precision is the\n microsecond, and a 64 bits integer is used to avoid overflows (maximum\n time interval is then 292271 years, which should be long enough for any\n video). Dates are stored as microseconds since a common date (usually the\n epoch). Note that date and time intervals can be manipulated using regular\n arithmetic operators, and that no special functions are required."]
pub type vlc_tick_t = i64;
#[doc = " \\defgroup date Timestamps, error-free\n These functions support generating timestamps without long term rounding\n errors due to sample rate conversions.\n \\ingroup input\n @{\n/\n/**\n Timestamps without long-term rounding errors"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct date_t {
    pub date: vlc_tick_t,
    pub i_divider_num: u32,
    pub i_divider_den: u32,
    pub i_remainder: u32,
}
extern "C" {
    #[doc = " Increments a date.\n\n Moves the date_t timestamp forward by a given number of samples.\n\n \\param date date to move forward\n \\param count number of samples\n \\return timestamp value after incrementing"]
    pub fn date_Increment(date: *mut date_t, count: u32) -> vlc_tick_t;
}
extern "C" {
    #[doc = " Decrements a date.\n\n Moves the date_t timestamp backward by a given number of samples.\n\n \\param date date to move backward\n \\param count number of samples\n \\return date value"]
    pub fn date_Decrement(date: *mut date_t, count: u32) -> vlc_tick_t;
}
