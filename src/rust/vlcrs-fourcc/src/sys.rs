/* automatically generated by rust-bindgen 0.66.1 */

#![allow(rustdoc::bare_urls)]
#![allow(rustdoc::broken_intra_doc_links)]
#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use std::num::NonZeroU32;

#[doc = " Basic types definitions\n/\n/**\n The vlc_fourcc_t type.\n\n See http://www.webartz.com/fourcc/ for a very detailed list."]
pub type vlc_fourcc_t = NonZeroU32;
extern "C" {
    #[doc = " It returns the codec associated to a fourcc within an ES category.\n\n If not found, it will return the given fourcc.\n If found, it will always be one of the VLC_CODEC_ defined above.\n\n You may use UNKNOWN_ES for the ES category if you don't have the information."]
    pub fn vlc_fourcc_GetCodec(
        i_cat: ::std::os::raw::c_int,
        i_fourcc: vlc_fourcc_t,
    ) -> vlc_fourcc_t;
}
extern "C" {
    #[doc = " It returns the codec associated to a fourcc stored in a zero terminated\n string.\n\n If the string is NULL or does not have exactly 4 characters, it will\n return 0, otherwise it behaves like vlc_fourcc_GetCodec.\n\n Provided for convenience."]
    pub fn vlc_fourcc_GetCodecFromString(
        i_cat: ::std::os::raw::c_int,
        arg1: *const ::std::os::raw::c_char,
    ) -> vlc_fourcc_t;
}
extern "C" {
    #[doc = " It converts the given fourcc to an audio codec when possible.\n\n The fourccs converted are aflt, araw/pcm , twos, sowt. When an incompatible i_bits\n is detected, 0 is returned.\n The other fourccs go through vlc_fourcc_GetCodec and i_bits is not checked."]
    pub fn vlc_fourcc_GetCodecAudio(
        i_fourcc: vlc_fourcc_t,
        i_bits: ::std::os::raw::c_int,
    ) -> vlc_fourcc_t;
}
extern "C" {
    #[doc = " It returns the description of the given fourcc or NULL if not found.\n\n You may use UNKNOWN_ES for the ES category if you don't have the information."]
    pub fn vlc_fourcc_GetDescription(
        i_cat: ::std::os::raw::c_int,
        i_fourcc: vlc_fourcc_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " It returns a list (terminated with the value 0) of YUV fourccs in\n decreasing priority order for the given chroma.\n\n It will always return a non NULL pointer that must not be freed."]
    pub fn vlc_fourcc_GetYUVFallback(arg1: vlc_fourcc_t) -> *const vlc_fourcc_t;
}
extern "C" {
    #[doc = " It returns a list (terminated with the value 0) of RGB fourccs in\n decreasing priority order for the given chroma.\n\n It will always return a non NULL pointer that must not be freed."]
    pub fn vlc_fourcc_GetRGBFallback(arg1: vlc_fourcc_t) -> *const vlc_fourcc_t;
}
extern "C" {
    #[doc = " It returns a list (terminated with the value 0) of fourccs in decreasing\n priority order for the given chroma. It will return either YUV or RGB\n fallbacks depending on whether or not the fourcc given is YUV.\n\n It will always return a non NULL pointer that must not be freed."]
    pub fn vlc_fourcc_GetFallback(arg1: vlc_fourcc_t) -> *const vlc_fourcc_t;
}
extern "C" {
    #[doc = " It returns true if the given fourcc is YUV and false otherwise."]
    pub fn vlc_fourcc_IsYUV(arg1: vlc_fourcc_t) -> bool;
}
extern "C" {
    #[doc = " It returns true if the two fourccs are equivalent if their U&V planes are\n swapped."]
    pub fn vlc_fourcc_AreUVPlanesSwapped(arg1: vlc_fourcc_t, arg2: vlc_fourcc_t) -> bool;
}
